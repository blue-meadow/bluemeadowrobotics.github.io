{"version":3,"sources":["logo.svg","components/top_navbar.jsx","components/footer.jsx","components/mission_section.jsx","components/technology_section.jsx","components/team_section.jsx","components/contact_section.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopNavbar","Navbar","collapseOnSelect","expand","className","variant","sticky","id","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Component","Footer","Container","fluid","MissionSection","props","state","page_fill_height","viewportHeight","window","innerHeight","document","body","clientHeight","maybeNavbar","getElementById","maybeFooter","navbarHeight","scrollHeight","offsetHeight","footerHeight","this","setState","fillHeight","style","height","class","TechnologySection","TeamSection","ContactSection","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,2JC6B5BC,E,uKArBX,OACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,UAAU,kBAAkBC,QAAQ,QAAQC,OAAO,MAAMC,GAAG,qBAC/F,kBAACN,EAAA,EAAOO,MAAR,CAAcC,KAAK,IAAIL,UAAU,iBAAjC,eACA,kBAACH,EAAA,EAAOS,OAAR,CAAeC,gBAAc,0BAC7B,kBAACV,EAAA,EAAOW,SAAR,CAAiBL,GAAG,yBAElB,kBAACM,EAAA,EAAD,CAAKT,UAAU,WACb,kBAACS,EAAA,EAAIC,KAAL,CAAUL,KAAK,YAAYL,UAAU,4BAArC,WACA,kBAACS,EAAA,EAAIC,KAAL,CAAUL,KAAK,eAAeL,UAAU,4BAAxC,eAGF,kBAACS,EAAA,EAAD,KACA,kBAACA,EAAA,EAAIC,KAAL,CAAUL,KAAK,SAASL,UAAU,4BAAlC,QACE,kBAACS,EAAA,EAAIC,KAAL,CAAUL,KAAK,YAAYL,UAAU,4BAArC,kB,GAfYW,a,OCWTC,E,uKAVX,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,4BAAQd,UAAU,wBAAwBG,GAAG,qBAC3C,yBAAKH,UAAU,6BAAf,+B,GALWW,aC0CNI,E,kDAzCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,iBAAkB,MAJH,E,gEASjB,IAAMC,EAAiBC,OAAOC,aAAeC,SAASC,KAAKC,aACvDC,EAAcH,SAASI,eAAe,qBACtCC,EAAcL,SAASI,eAAe,qBAE1C,GAAID,GAAeE,EAAa,CAC9B,IAAMC,EAAeH,EAAYI,cAAgBJ,EAAYK,aACvDC,EAAeJ,EAAYE,cAAgBF,EAAYG,aAC7DE,KAAKC,SAAS,CACZf,iBAAkBC,EAAiBS,EAAeG,O,+BAQtD,IAAMG,EAAaF,KAAKf,MAAMC,iBAAX,UAAiCc,KAAKf,MAAMC,iBAA5C,MAAkE,QAErF,OACE,kBAACL,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACD,EAAA,EAAD,CAAWb,UAAU,oBAAoBmC,MAAO,CAACC,OAAQF,IACvD,yBAAKG,MAAM,gCACT,yBAAKA,MAAM,kBACT,uBAAGrC,UAAU,uBAAb,uB,GAjCeW,aCSd2B,E,uKAPX,OACE,kBAACzB,EAAA,EAAD,CAAWC,OAAK,Q,GAHUH,aCSjB4B,E,uKAPX,OACE,kBAAC1B,EAAA,EAAD,CAAWC,OAAK,Q,GAHIH,aCSX6B,E,uKAPX,OACE,kBAAC3B,EAAA,EAAD,CAAWC,OAAK,Q,GAHOH,aCqBd8B,MAbf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCTc0C,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAASI,eAAe,SDyHpB,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e094dd3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\n\nclass TopNavbar extends Component {\n  render() {\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" className=\"BackgroundWhite\" variant=\"light\" sticky=\"top\" id=\"bluemeadow-navbar\">\n        <Navbar.Brand href=\"/\" className=\"FontMonospace\">BLUE MEADOW</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          {/* Aligned with the left side of the navbar */}\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/#mission\" className=\"ColorBlack FontMonospace\">Mission</Nav.Link>\n            <Nav.Link href=\"/#technology\" className=\"ColorBlack FontMonospace\">Technology</Nav.Link>\n          </Nav>\n          {/* Aligned with the right side of the navbar */}\n          <Nav>\n          <Nav.Link href=\"/#team\" className=\"ColorBlack FontMonospace\">Team</Nav.Link>\n            <Nav.Link href=\"/#contact\" className=\"ColorBlack FontMonospace\">Contact</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default TopNavbar;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\n\nclass Footer extends Component {\n  render() {\n    return (\n      <Container fluid>\n        <footer className=\"page-footer pt-1 pb-1\" id=\"bluemeadow-footer\">\n          <div className=\"text-center FontMonospace\">Â© 2020 BLUE MEADOW</div>\n        </footer>\n      </Container>\n    );\n  }\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\n\nclass MissionSection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      page_fill_height: null\n    };\n  };\n\n  componentDidMount() {\n    const viewportHeight = window.innerHeight || document.body.clientHeight;\n    var maybeNavbar = document.getElementById(\"bluemeadow-navbar\");\n    var maybeFooter = document.getElementById(\"bluemeadow-footer\");\n\n    if (maybeNavbar && maybeFooter) {\n      const navbarHeight = maybeNavbar.scrollHeight || maybeNavbar.offsetHeight;\n      const footerHeight = maybeFooter.scrollHeight || maybeFooter.offsetHeight;\n      this.setState({\n        page_fill_height: viewportHeight - navbarHeight - footerHeight\n      });\n    }\n  }\n\n  render() {\n    // If height couldn't be computed, fill entire screen. This looks almost as good, but pushes\n    // the footer past the end of the page.\n    const fillHeight = this.state.page_fill_height ? `${this.state.page_fill_height}px`: \"100vh\";\n\n    return (\n      <Container fluid>\n        <Container className=\"ComingSoonSection\" style={{height: fillHeight}}>\n          <div class=\"row align-items-center h-100\">\n            <div class=\"col-12 mx-auto\">\n              <p className=\"text-center my-auto\">COMING SOON</p>\n            </div>\n          </div>\n        </Container>\n      </Container>\n    );\n  }\n};\n\nexport default MissionSection;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\n\nclass TechnologySection extends Component {\n  render() {\n    return (\n      <Container fluid>\n      </Container>\n    );\n  }\n};\n\nexport default TechnologySection;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\n\nclass TeamSection extends Component {\n  render() {\n    return (\n      <Container fluid>\n      </Container>\n    );\n  }\n};\n\nexport default TeamSection;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\n\n\nclass ContactSection extends Component {\n  render() {\n    return (\n      <Container fluid>\n      </Container>\n    );\n  }\n};\n\nexport default ContactSection;\n","import React from 'react';\nimport logo from './logo.svg';\n\nimport './css/style.css';\n\nimport TopNavbar from './components/top_navbar';\nimport Footer from './components/footer';\nimport MissionSection from './components/mission_section';\nimport TechnologySection from './components/technology_section';\nimport TeamSection from './components/team_section';\nimport ContactSection from './components/contact_section';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopNavbar></TopNavbar>\n      <MissionSection></MissionSection>\n      <TechnologySection></TechnologySection>\n      <TeamSection></TeamSection>\n      <ContactSection></ContactSection>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/SimplePlaceholder.jsx","App.js","serviceWorker.js","index.js"],"names":["SimplePlaceholder","Container","fluid","id","Row","className","Col","Component","App","Array","from","document","getElementsByClassName","forEach","element","animateClassNames","classList","filter","s","includes","name","remove","IntersectionObserver","entries","entry","isIntersecting","target","add","observe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAuBeA,E,uKAfX,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,GAAG,eAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,4BACb,kBAACC,EAAA,EAAD,KACE,6BACE,uBAAGD,UAAU,mCAAb,KAAiD,kCAAjD,qB,GAPkBE,aCqDjBC,E,uKAzCX,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,S,0CAYoBI,MAAMC,KAAKC,SAASC,uBAAuB,oBAEnDC,SAAQ,SAAAC,GACtB,IAAMC,EAAoBN,MAAMC,KAAKI,EAAQE,WAAWC,QAAO,SAAAC,GAC7D,OAAOA,EAAEC,SAAS,gBAIpBJ,EAAkBF,SAAQ,SAAAO,GAAI,OAAIN,EAAQE,UAAUK,OAAOD,MAEpC,IAAIE,sBAAqB,SAAAC,GAC9CA,EAAQV,SAAQ,SAAAW,GACVA,EAAMC,eACRV,EAAkBF,SAAQ,SAAAO,GAAI,OAAII,EAAME,OAAOV,UAAUW,IAAIP,MAK/DL,EAAkBF,SAAQ,SAAAO,GAAI,OAAII,EAAME,OAAOV,UAAUK,OAAOD,YAIrDQ,QAAQd,U,GAtCXP,aCJEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63334de3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport { Row, Col } from 'react-bootstrap'\n\n\nclass SimplePlaceholder extends Component {\n  render() {\n    return (\n      <Container fluid id=\"coming-soon\">\n        <Row className=\"h-100 align-items-center\">\n          <Col>\n            <div>\n              <p className=\"bm-coming-soon-text text-center\">CO<sub>2</sub>MING SOON</p>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n};\n\n\nexport default SimplePlaceholder;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport './css/style.css';\n\n// import TopNavbar from './components/TopNavbar';\n// import Footer from './components/Footer';\n// import { OpportunitySection, ChallengeSection } from './components/MissionSection';\n// import { MissionSection } from './components/MissionSection';\n// import TechnologySection from './components/TechnologySection';\n// import TeamSection from './components/TeamSection';\n// import ContactSection from './components/ContactSection';\n// import BannerSection from './components/BannerSection';\nimport SimplePlaceholder from './components/SimplePlaceholder';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SimplePlaceholder/>\n      </div>\n    );\n  }\n\n  /**\n   * Add AnimateOnScroll functionality to some objects. Any HTML object with the \"AnimateOnScroll\"\n   * class name will be triggered when the user scrolls to it. Any other classname with the format\n   * animate__* is removed initially, and added upon scroll to trigger.\n   */\n  componentDidMount() {\n    // Get all elements with \"AnimateOnScroll\" in their classlist. Collect\n    const triggerElements = Array.from(document.getElementsByClassName(\"AnimateOnScroll\"));\n\n    triggerElements.forEach(element => {\n      const animateClassNames = Array.from(element.classList).filter(s => {\n        return s.includes(\"animate__\");\n      });\n\n      // Add a scroll observer for this object.\n      animateClassNames.forEach(name => element.classList.remove(name));\n\n      const scrollObserver = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            animateClassNames.forEach(name => entry.target.classList.add(name));\n            return; // If we added the class, exit the function\n          }\n\n          // We're not intersecting, so remove the class!\n          animateClassNames.forEach(name => entry.target.classList.remove(name));\n        });\n      });\n\n      scrollObserver.observe(element);\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}